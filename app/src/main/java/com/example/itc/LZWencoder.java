package com.example.itc;
import java.util.ArrayList;				//arraylist functionalities

public class LZWencoder {
	
	private ArrayList<String> table;		// arraylist "table" for storing all symbols 
	private double MAX;						// max size of the table using input N
	private ArrayList<Integer> output;				// "output" arraylist for the output code after encoding
	public ArrayList<String> getTable() {
		return table;
	}
	public void setTable(ArrayList<String> table) {
		this.table = table;
	}
	public double getMAX() {
		return MAX;
	}
	public void setMAX(double mAX) {
		MAX = mAX;
	}
	public ArrayList<Integer> getOutput() {
		return output;
	}
	public void setOutput(ArrayList<Integer> output) {
		this.output = output;
	}
	// CONSTRUCTOR THAT INITIALIZES THE TABLE WITH 256 CHARACTERS OF THE ASCII TABLE
	LZWencoder(String max){
		double x = Double.parseDouble(max);
		this.MAX = Math.pow(2,x);			// maximum size of the table 2^N
		this.output = new ArrayList<Integer>();
		this.table = new ArrayList<String>();
		char c;
		String s;
		for(int i=0; i<256; i++){		// initializing the table with tha ascii table
			c = (char)i;
			s = c + "";					// converting the character to a string
			this.table.add(s);
		}
	}
	// MAIN METHOD WHERE ENCODING IS DONE BY READING A FILE AND BIT LENGTH SPECIFIED IN THE ARGUMENTS
	public static String encode(String input){
		
		LZWencoder lzw = new LZWencoder("255");		// creating an object of LZWencoder thus invoking the constructor and initializing the table
		ArrayList<String> code = new ArrayList<String>();
		char c;
		
		String s = new String();
		String cc = new String();
		
		// try catch to handle exception generated by SCANNER
		try {
			for(int i=0;i<input.length();i++){
				c = input.charAt(i);
				cc = c + "";
				code.add(cc);
			}
		// ENCODING ALGORITHM	
		for(int i=0; i<code.size(); i++){	// itterate through every code available in the arraylist
				
				if(lzw.table.contains(s + code.get(i))){	// check if the symbol is present in the "table"
					s = s + code.get(i);					// append the string
					System.out.println(s);
				}
				else{
					
					lzw.output.add(lzw.table.indexOf(s));	// if not present the code for the previous string is added to the "output"
					
					if(lzw.table.size() < lzw.MAX){			// add the new string to the table if the size is less than the maximum size
						lzw.table.add(s + code.get(i));
					}
					s = code.get(i);			// set the string as the new code
				}
			}
			lzw.output.add(lzw.table.indexOf(s));		// add the code of the final string to the "output"
			// PRINTING THE OUTPUT ON THE SCREEN
			System.out.println("----------");
			for(int i=0; i<lzw.output.size(); i++){
				System.out.println(lzw.output.get(i));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String encodedOutput = "";
		for(int i=0;i<lzw.output.size();i++){
			encodedOutput += lzw.output.get(i)+",";
		}
		return encodedOutput;
	}
}

